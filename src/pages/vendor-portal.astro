---
import DefaultLayout from '../layouts/DefaultLayout.astro';
import { requireAuth } from './api/utils/auth';
import { db } from '../db/client';
import { listings, sales, payouts, vendors, vendorImages } from '../db/schema';
import { eq, and } from 'drizzle-orm';

// Check for auth token in cookies
const cookieHeader = Astro.request.headers.get('cookie') || '';
const cookies: Record<string, string> = {};
cookieHeader.split(';').forEach(cookie => {
  const [name, ...rest] = cookie.trim().split('=');
  if (name) {
    cookies[name] = rest.join('=');
  }
});

if (!cookies.token) {
  return Astro.redirect('/login');
}

// Verify token and get vendor
let vendorId;
try {
  const jwt = await import('jsonwebtoken');
  const payload = jwt.verify(cookies.token, process.env.JWT_SECRET!) as { vendorId: string };
  vendorId = parseInt(payload.vendorId, 10);
} catch {
  return Astro.redirect('/login');
}

// Fetch vendor info + images
const vendor = await db.select().from(vendors).where(eq(vendors.id, vendorId)).get();
const storeImages = await db
  .select()
  .from(vendorImages)
  .where(and(eq(vendorImages.vendorId, vendorId), eq(vendorImages.type, 'store')));

// Load stats
const inventory = await db.select().from(listings).where(eq(listings.vendorId, vendorId));
const soldItems = await db.select().from(sales).where(eq(sales.vendorId, vendorId));
const totalRevenue = soldItems.reduce((sum, s) => sum + s.amount, 0);
const pendingPayouts = await db
  .select()
  .from(payouts)
  .where(and(eq(payouts.vendorId, vendorId), eq(payouts.status, 'pending')));
---

<DefaultLayout title="Vendor Dashboard - Stencil">
  <!-- Profile Section -->
  <section class="flex flex-col md:flex-row items-center md:items-start bg-white p-6 rounded-lg shadow mb-10">
    <!-- Vendor Logo Upload -->
  <div class="flex flex-col items-center mb-4 md:mb-0 md:mr-6 text-center">
    <div class="relative h-32 w-32 rounded-full border overflow-hidden bg-gray-200">
      {vendor?.logo ? (
        <img
          id="vendorLogo"
          src={vendor.logo}
          alt="Profile Picture"
          class="h-full w-full object-cover"
        />
      ) : (
        <div 
          id="vendorLogo"
          class="h-full w-full flex items-center justify-center text-gray-500 text-2xl font-bold bg-gradient-to-br from-gray-200 to-gray-300"
        >
          {vendor?.name?.charAt(0)?.toUpperCase() || '?'}
        </div>
      )}
    </div>
    <label for="logoUpload" class="block mt-3 text-sm text-blue-600 hover:underline cursor-pointer">
      Change Photo
    </label>
    <input type="file" id="logoUpload" class="hidden" accept="image/*" />
    <p id="uploadMsg" class="text-xs text-gray-500 mt-1"></p>
  </div>


    <div class="flex-1 w-full">
      <form id="profileForm" class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-600">Business Name</label>
          <input
            type="text"
            name="name"
            value={vendor?.name || ''}
            class="mt-1 w-full border rounded p-2"
          />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-600">Description</label>
          <textarea
            name="description"
            rows="3"
            class="mt-1 w-full border rounded p-2"
          >{vendor?.description || ''}</textarea>
        </div>
        <button
          type="submit"
          class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
        >
          Save Changes
        </button>
        <p id="profileMsg" class="text-sm mt-2"></p>
      </form>
    </div>
  </section>

  <!-- Store Images Section -->
  <section class="bg-white p-6 rounded-lg shadow mb-10">
    <h2 class="text-xl font-semibold mb-4">Store Images</h2>
    <div id="storeImages" class="flex flex-wrap gap-4 mb-4">
      {storeImages.map((img) => (
        <div class="relative group">
          <img src={img.imageUrl} class="h-32 w-32 object-cover rounded border" />
          <button
            class="absolute top-1 right-1 bg-black/60 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition"
            data-url={img.imageUrl}
          >
            ✕
          </button>
        </div>
      ))}
    </div>
    <label for="storeUpload" class="cursor-pointer px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
      Upload New Image
    </label>
    <input type="file" id="storeUpload" class="hidden" accept="image/*" multiple />
    <p id="uploadMsg" class="mt-3 text-sm text-gray-600"></p>
  </section>

  <!-- Stats Cards -->
  <section class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    <div class="p-4 bg-white rounded shadow">
      <h3 class="text-sm font-medium text-gray-500">Inventory</h3>
      <p class="text-2xl font-bold">{inventory.length}</p>
    </div>
    <div class="p-4 bg-white rounded shadow">
      <h3 class="text-sm font-medium text-gray-500">Items Sold</h3>
      <p class="text-2xl font-bold">{soldItems.length}</p>
    </div>
    <div class="p-4 bg-white rounded shadow">
      <h3 class="text-sm font-medium text-gray-500">Total Revenue</h3>
      <p class="text-2xl font-bold">${totalRevenue.toFixed(2)}</p>
    </div>
    <div class="p-4 bg-white rounded shadow">
      <h3 class="text-sm font-medium text-gray-500">Pending Payouts</h3>
      <p class="text-2xl font-bold">{pendingPayouts.length}</p>
    </div>
  </section>

  <!-- Inventory Table -->
  <section>
    <div class="flex items-center justify-between mb-4">
      <h2 class="text-xl font-semibold">Your Inventory</h2>
      <a href="/add-listing" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Add New Listing</a>
    </div>
    <div class="overflow-x-auto bg-white rounded shadow">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Name</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Category</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">Actions</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-gray-200">
          {inventory.map((item) => (
            <tr>
              <td class="px-6 py-4 whitespace-nowrap">{item.name}</td>
              <td class="px-6 py-4 whitespace-nowrap">{item.category || 'Uncategorized'}</td>
              <td class="px-6 py-4 whitespace-nowrap">{item.status}</td>
              <td class="px-6 py-4 whitespace-nowrap text-right space-x-2">
                <a href={`/edit-listing/${item.id}`} class="text-blue-600 hover:underline">Edit</a>
                <button data-listing-id={item.id} class="text-red-600 hover:underline delete-btn">Remove</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </section>

  <script is:inline>
    const form = document.getElementById('profileForm');
    const msg = document.getElementById('profileMsg');
    const logoUpload = document.getElementById('logoUpload');
    const logoImg = document.getElementById('vendorLogo');
    const storeUpload = document.getElementById('storeUpload');
    const storeImages = document.getElementById('storeImages');
    const uploadMsg = document.getElementById('uploadMsg');

    // Handle profile text update
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      msg.textContent = 'Saving...';
      const data = Object.fromEntries(new FormData(form).entries());
      const res = await fetch('/vendor-portal/profile', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      msg.textContent = res.ok ? '✅ Profile updated successfully.' : '❌ Error updating profile.';
    });

    // Handle logo upload
    logoUpload.addEventListener('change', async (e) => {
      const file = e.target.files[0];
      if (!file) return;

      uploadMsg.textContent = '📤 Uploading...';

      const formData = new FormData();
      formData.append('file', file);

      try {
        // Upload via signed endpoint
        const uploadRes = await fetch('/vendor-portal/upload-logo', {
          method: 'POST',
          body: formData,
        });

        if (!uploadRes.ok) throw new Error('Upload failed');
        const { url } = await uploadRes.json();

        // Update UI and DB
        logoImg.innerHTML = `<img src="${url}" alt="Profile Picture" class="h-full w-full object-cover" />`;
        uploadMsg.textContent = '✅ Uploaded successfully! Saving...';

        await fetch('/vendor-portal/profile', {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ logo: url }),
        });

        uploadMsg.textContent = '✅ Profile photo updated!';
      } catch (err) {
        console.error('Image upload failed:', err);
        uploadMsg.textContent = '❌ Upload failed. Please try again.';
      }
    });

    // 🔹 Upload store images
    storeUpload.addEventListener('change', async (e) => {
      const files = Array.from(e.target.files);
      for (const file of files) {
        uploadMsg.textContent = `Uploading ${file.name}...`;
        const fd = new FormData();
        fd.append('file', file);
        try {
          const uploadRes = await fetch('/vendor-portal/upload-image', { method: 'POST', body: fd });
          const { url } = await uploadRes.json();

          await fetch('/vendor-portal/save-image', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ image_url: url, type: 'store' }),
          });

          const wrapper = document.createElement('div');
          wrapper.className = 'relative group';
          wrapper.innerHTML = `
            <img src="${url}" class="h-32 w-32 object-cover rounded border" />
            <button class="absolute top-1 right-1 bg-black/60 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition" data-url="${url}">✕</button>
          `;
          storeImages.appendChild(wrapper);
          uploadMsg.textContent = '✅ Uploaded successfully.';
        } catch (err) {
          console.error('Upload error:', err);
          uploadMsg.textContent = '❌ Upload failed.';
        }
      }
    });

    // 🔹 Delete store image
    storeImages.addEventListener('click', async (e) => {
      const btn = e.target.closest('button[data-url]');
      if (!btn) return;
      const url = btn.dataset.url;
      if (!confirm('Delete this image?')) return;
      uploadMsg.textContent = 'Deleting image...';
      try {
        const res = await fetch('/vendor-portal/delete-image', {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ image_url: url }),
        });
        if (!res.ok) throw new Error('Delete failed');
        btn.parentElement.remove();
        uploadMsg.textContent = '🗑️ Image deleted.';
      } catch (err) {
        console.error('Delete error:', err);
        uploadMsg.textContent = '❌ Failed to delete image.';
      }
    });

    // 🔹 Delete listing
    document.addEventListener('click', async (e) => {
      if (!e.target.classList.contains('delete-btn')) return;
      const listingId = e.target.dataset.listingId;
      if (!confirm('Delete this listing?')) return;
      try {
        const res = await fetch(`/api/listings/${listingId}`, { method: 'DELETE' });
        if (res.ok) {
          location.reload();
        } else {
          alert('Failed to delete listing');
        }
      } catch (err) {
        console.error('Delete error:', err);
        alert('Failed to delete listing');
      }
    });
  </script>
</DefaultLayout>
