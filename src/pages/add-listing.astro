---
import DefaultLayout from '../layouts/DefaultLayout.astro';
import { requireAuth } from '../lib/auth';

// Authenticate vendor
const vendorId = await requireAuth(Astro);
---
<DefaultLayout title="Add New Listing - Stencil">
  <section class="max-w-2xl mx-auto px-4 sm:px-6 py-6 bg-white rounded-lg shadow">
    <h2 class="text-2xl font-semibold mb-4">Add New Listing</h2>
    <form id="listingForm" class="space-y-4">
      <div>
        <label for="name" class="block font-medium">Name</label>
        <input type="text" name="name" id="name" required class="w-full mt-1 p-2 border rounded" />
      </div>
      <div>
        <label for="description" class="block font-medium">Description</label>
        <textarea name="description" id="description" rows="3" class="w-full mt-1 p-2 border rounded"></textarea>
      </div>
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div>
          <label for="category" class="block font-medium">Category</label>
          <select name="category" id="category" class="w-full mt-1 p-2 border rounded">
            <option value="">Select Category</option>
            <option value="clothing">Clothing</option>
            <option value="accessories">Accessories</option>
            <option value="art">Art</option>
            <option value="home-decor">Home Decor</option>
            <option value="jewelry">Jewelry</option>
            <option value="crafts">Crafts</option>
            <option value="other">Other</option>
          </select>
        </div>
        <div>
          <label for="subCategory" class="block font-medium">Subcategory</label>
          <input type="text" name="subCategory" id="subCategory" placeholder="e.g., T-shirts, Paintings, etc." class="w-full mt-1 p-2 border rounded" />
        </div>
      </div>
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div>
          <label for="price" class="block font-medium">Price ($)</label>
          <input type="number" name="price" id="price" step="0.01" required class="w-full mt-1 p-2 border rounded" />
        </div>
        <div>
          <label for="stock" class="block font-medium">Stock Quantity</label>
          <input type="number" name="stock" id="stock" min="0" value="1" required class="w-full mt-1 p-2 border rounded" />
        </div>
      </div>
      <div>
        <label for="status" class="block font-medium">Condition</label>
        <select name="status" id="status" class="w-full mt-1 p-2 border rounded">
          <option value="new">New</option>
          <option value="used">Used</option>
        </select>
      </div>
      <div>
        <label for="image" class="block font-medium">Image</label>
        <input type="file" name="image" id="image" accept="image/*" class="w-full mt-1" />
      </div>
      <button type="submit" class="w-full py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Create Listing</button>
    </form>
    <p id="formMessage" class="mt-4 text-center text-sm"></p>
  </section>

  <script is:inline type="module">
    const form = document.getElementById('listingForm');
    const msg = document.getElementById('formMessage');
    form.addEventListener('submit', async (e) => {
      e.preventDefault(); 
      msg.textContent = 'Creating listing...';
      
      const data = Object.fromEntries(new FormData(form).entries());
      
      // Handle image upload if file is selected
      if (form.image.files.length) {
        const file = form.image.files[0];
        try {
          const formData = new FormData();
          formData.append('file', file);
          const uploadRes = await fetch('/vendor-portal/upload-image', {
            method: 'POST',
            body: formData,
          });
          if (uploadRes.ok) {
            const { url } = await uploadRes.json();
            data.imageUrl = url;
          } else {
            throw new Error('Image upload failed');
          }
        } catch (err) {
          msg.textContent = 'Image upload failed. Please try again.';
          return;
        }
      }
      
      // Transform data to match new listing-variants structure
      const listingData = {
        name: data.name,
        description: data.description,
        category: data.category || '',
        subCategory: data.subCategory || '',
        tags: data.tags || '',
        variants: [{
          name: `${data.name} - Default`,
          price: parseFloat(data.price),
          stock: parseInt(data.stock) || 1,
          attributes: {
            condition: data.status || 'new'
          },
          images: data.imageUrl ? [data.imageUrl] : []
        }]
      };
      
      try {
        const res = await fetch('/api/listings', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(listingData),
          credentials: 'include', // Include cookies for authentication
        });
        if (res.ok) {
          window.location.href = '/vendor-portal';
        } else {
          msg.textContent = await res.text();
        }
      } catch {
        msg.textContent = 'Server error. Please try again later.';
      }
    });
  </script>
</DefaultLayout>
